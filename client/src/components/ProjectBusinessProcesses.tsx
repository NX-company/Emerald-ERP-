import { useQuery } from "@tanstack/react-query";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { Alert, AlertDescription } from "@/components/ui/alert";
import { Skeleton } from "@/components/ui/skeleton";
import {
  Calendar,
  ArrowRight,
  AlertTriangle,
  CheckCircle2,
  Clock,
  TrendingUp,
  Link2,
  Layers
} from "lucide-react";
import type { ProjectStage } from "@shared/schema";

interface ProjectBusinessProcessesProps {
  projectId: string;
}

interface StageWithDependencies extends ProjectStage {
  dependencies?: string[];
  dependentStages?: string[];
  isOnCriticalPath?: boolean;
  delayDays?: number;
}

export function ProjectBusinessProcesses({ projectId }: ProjectBusinessProcessesProps) {
  // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —ç—Ç–∞–ø—ã –ø—Ä–æ–µ–∫—Ç–∞
  const { data: stages = [], isLoading } = useQuery<ProjectStage[]>({
    queryKey: ['/api/projects', projectId, 'stages'],
    enabled: !!projectId,
  });

  // –ü–æ–ª—É—á–∞–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —ç—Ç–∞–ø–æ–≤
  const { data: dependencies = [] } = useQuery<any[]>({
    queryKey: ['/api/projects', projectId, 'dependencies'],
    enabled: !!projectId,
  });

  if (isLoading) {
    return (
      <div className="space-y-4">
        <Skeleton className="h-32 w-full" />
        <Skeleton className="h-32 w-full" />
        <Skeleton className="h-32 w-full" />
      </div>
    );
  }

  // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —ç—Ç–∞–ø—ã —Å —É—á—ë—Ç–æ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
  const stagesWithDeps: StageWithDependencies[] = stages.map(stage => {
    const stageDeps = dependencies.filter(d => d.dependent_stage_id === stage.id);
    const dependentOnThis = dependencies.filter(d => d.depends_on_stage_id === stage.id);

    return {
      ...stage,
      dependencies: stageDeps.map(d => d.depends_on_stage_id),
      dependentStages: dependentOnThis.map(d => d.dependent_stage_id),
    };
  });

  // –†–∞—Å—á—ë—Ç –∑–∞–¥–µ—Ä–∂–µ–∫ –∏ –≤–ª–∏—è–Ω–∏—è –Ω–∞ —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Å—Ä–æ–∫
  const calculateDelays = (stage: StageWithDependencies) => {
    if (!stage.planned_end_date || stage.status === 'completed') return 0;

    const plannedEnd = new Date(stage.planned_end_date);
    const today = new Date();

    if (stage.status === 'in_progress' && today > plannedEnd) {
      return Math.ceil((today.getTime() - plannedEnd.getTime()) / (1000 * 60 * 60 * 24));
    }

    return 0;
  };

  // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø—É—Ç–∏ (—É–ø—Ä–æ—â—ë–Ω–Ω—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º)
  const findCriticalPath = () => {
    // –≠—Ç–∞–ø—ã –±–µ–∑ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π (–Ω–∞—á–∞–ª—å–Ω—ã–µ)
    const startStages = stagesWithDeps.filter(s => !s.dependencies || s.dependencies.length === 0);

    // –≠—Ç–∞–ø—ã –±–µ–∑ –∑–∞–≤–∏—Å–∏–º—ã—Ö (–∫–æ–Ω–µ—á–Ω—ã–µ)
    const endStages = stagesWithDeps.filter(s => !s.dependentStages || s.dependentStages.length === 0);

    // –ü—Ä–æ—Å—Ç–∞—è —ç–≤—Ä–∏—Å—Ç–∏–∫–∞: –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π –ø—É—Ç—å = —Å–∞–º–∞—è –¥–ª–∏–Ω–Ω–∞—è —Ü–µ–ø–æ—á–∫–∞
    const criticalStageIds = new Set<string>();

    // –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ –Ω–µ–∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–µ —ç—Ç–∞–ø—ã —Å –∑–∞–¥–µ—Ä–∂–∫–∞–º–∏
    stagesWithDeps.forEach(stage => {
      const delay = calculateDelays(stage);
      if (delay > 0) {
        criticalStageIds.add(stage.id);
        // –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ –∑–∞–≤–∏—Å–∏–º—ã–µ —ç—Ç–∞–ø—ã
        stage.dependentStages?.forEach(depId => criticalStageIds.add(depId));
      }
    });

    return criticalStageIds;
  };

  const criticalPath = findCriticalPath();

  // –ü–æ–¥—Å—á—ë—Ç –æ–±—â–µ–π –∑–∞–¥–µ—Ä–∂–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞
  const totalProjectDelay = stagesWithDeps.reduce((sum, stage) => {
    return sum + calculateDelays(stage);
  }, 0);

  // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
  const stats = {
    total: stages.length,
    completed: stages.filter(s => s.status === 'completed').length,
    inProgress: stages.filter(s => s.status === 'in_progress').length,
    delayed: stagesWithDeps.filter(s => calculateDelays(s) > 0).length,
  };

  // –ü–æ–ª—É—á–∞–µ–º –∏–º—è —ç—Ç–∞–ø–∞ –ø–æ ID
  const getStageName = (stageId: string) => {
    return stages.find(s => s.id === stageId)?.name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —ç—Ç–∞–ø';
  };

  return (
    <div className="space-y-6">
      {/* –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ */}
      <div className="grid grid-cols-2 md:grid-cols-4 gap-4">
        <Card>
          <CardContent className="p-4">
            <div className="flex items-center gap-2">
              <Layers className="w-4 h-4 text-muted-foreground" />
              <div>
                <p className="text-xs text-muted-foreground">–í—Å–µ–≥–æ —ç—Ç–∞–ø–æ–≤</p>
                <p className="text-2xl font-bold">{stats.total}</p>
              </div>
            </div>
          </CardContent>
        </Card>

        <Card>
          <CardContent className="p-4">
            <div className="flex items-center gap-2">
              <CheckCircle2 className="w-4 h-4 text-green-500" />
              <div>
                <p className="text-xs text-muted-foreground">–ó–∞–≤–µ—Ä—à–µ–Ω–æ</p>
                <p className="text-2xl font-bold text-green-600">{stats.completed}</p>
              </div>
            </div>
          </CardContent>
        </Card>

        <Card>
          <CardContent className="p-4">
            <div className="flex items-center gap-2">
              <Clock className="w-4 h-4 text-blue-500" />
              <div>
                <p className="text-xs text-muted-foreground">–í —Ä–∞–±–æ—Ç–µ</p>
                <p className="text-2xl font-bold text-blue-600">{stats.inProgress}</p>
              </div>
            </div>
          </CardContent>
        </Card>

        <Card>
          <CardContent className="p-4">
            <div className="flex items-center gap-2">
              <AlertTriangle className="w-4 h-4 text-red-500" />
              <div>
                <p className="text-xs text-muted-foreground">–ü—Ä–æ—Å—Ä–æ—á–µ–Ω–æ</p>
                <p className="text-2xl font-bold text-red-600">{stats.delayed}</p>
              </div>
            </div>
          </CardContent>
        </Card>
      </div>

      {/* –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ –∑–∞–¥–µ—Ä–∂–∫–∞—Ö */}
      {totalProjectDelay > 0 && (
        <Alert variant="destructive">
          <AlertTriangle className="h-4 w-4" />
          <AlertDescription>
            <strong>–í–Ω–∏–º–∞–Ω–∏–µ!</strong> –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –∑–∞–¥–µ—Ä–∂–∫–∏ –Ω–∞ {totalProjectDelay} –¥–Ω., –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –ø–æ–≤–ª–∏—è—Ç—å –Ω–∞ —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Å—Ä–æ–∫ –ø—Ä–æ–µ–∫—Ç–∞.
          </AlertDescription>
        </Alert>
      )}

      {/* –°–ø–∏—Å–æ–∫ —ç—Ç–∞–ø–æ–≤ —Å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—è–º–∏ */}
      <div>
        <h3 className="text-lg font-semibold mb-4">–ë–∏–∑–Ω–µ—Å-–ø—Ä–æ—Ü–µ—Å—Å –ø—Ä–æ–µ–∫—Ç–∞</h3>
        <div className="space-y-3">
          {stagesWithDeps.length === 0 ? (
            <Card>
              <CardContent className="p-8 text-center">
                <Layers className="w-12 h-12 mx-auto text-muted-foreground/50 mb-2" />
                <p className="text-sm text-muted-foreground">–ù–µ—Ç —ç—Ç–∞–ø–æ–≤ –≤ –ø—Ä–æ–µ–∫—Ç–µ</p>
              </CardContent>
            </Card>
          ) : (
            stagesWithDeps.map((stage) => {
              const delay = calculateDelays(stage);
              const isOnCriticalPath = criticalPath.has(stage.id);

              return (
                <Card
                  key={stage.id}
                  className={`border-l-4 transition-all ${
                    isOnCriticalPath
                      ? 'border-red-500 bg-red-50/30 dark:bg-red-950/20'
                      : stage.status === 'completed'
                      ? 'border-green-500 bg-green-50/30 dark:bg-green-950/20'
                      : stage.status === 'in_progress'
                      ? 'border-blue-500 bg-blue-50/30 dark:bg-blue-950/20'
                      : 'border-gray-400 bg-accent/30'
                  }`}
                >
                  <CardHeader>
                    <div className="flex items-start justify-between gap-4">
                      <div className="flex-1">
                        <CardTitle className="text-base flex items-center gap-2">
                          {stage.name}
                          {isOnCriticalPath && (
                            <Badge variant="destructive" className="text-xs">
                              ‚ö†Ô∏è –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π –ø—É—Ç—å
                            </Badge>
                          )}
                        </CardTitle>
                        {stage.description && (
                          <p className="text-sm text-muted-foreground mt-1">
                            {stage.description}
                          </p>
                        )}
                      </div>
                      <Badge
                        variant="outline"
                        className={
                          stage.status === 'completed'
                            ? 'border-green-500 text-green-700'
                            : stage.status === 'in_progress'
                            ? 'border-blue-500 text-blue-700'
                            : ''
                        }
                      >
                        {stage.status === 'pending' && '‚ö™ –û–∂–∏–¥–∞–µ—Ç'}
                        {stage.status === 'in_progress' && 'üîµ –í —Ä–∞–±–æ—Ç–µ'}
                        {stage.status === 'completed' && 'üü¢ –ó–∞–≤–µ—Ä—à—ë–Ω'}
                      </Badge>
                    </div>
                  </CardHeader>
                  <CardContent className="space-y-3">
                    {/* –î–∞—Ç—ã */}
                    <div className="flex gap-4 text-sm">
                      {stage.planned_start_date && (
                        <div className="flex items-center gap-1 text-muted-foreground">
                          <Calendar className="w-4 h-4" />
                          <span>
                            {new Date(stage.planned_start_date).toLocaleDateString('ru-RU')}
                          </span>
                        </div>
                      )}
                      {stage.planned_end_date && (
                        <div className="flex items-center gap-1 text-muted-foreground">
                          <ArrowRight className="w-4 h-4" />
                          <span>
                            {new Date(stage.planned_end_date).toLocaleDateString('ru-RU')}
                          </span>
                        </div>
                      )}
                    </div>

                    {/* –ó–∞–¥–µ—Ä–∂–∫–∞ */}
                    {delay > 0 && (
                      <Alert variant="destructive" className="py-2">
                        <AlertTriangle className="h-4 w-4" />
                        <AlertDescription className="text-sm">
                          –ó–∞–¥–µ—Ä–∂–∫–∞: {delay} –¥–Ω.
                          {stage.dependentStages && stage.dependentStages.length > 0 && (
                            <span className="ml-1">
                              (–∑–∞—Ç—Ä–æ–Ω–µ—Ç {stage.dependentStages.length} –∑–∞–≤–∏—Å–∏–º—ã—Ö —ç—Ç–∞–ø–æ–≤)
                            </span>
                          )}
                        </AlertDescription>
                      </Alert>
                    )}

                    {/* –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ */}
                    {stage.dependencies && stage.dependencies.length > 0 && (
                      <div className="space-y-2">
                        <div className="flex items-center gap-2 text-sm font-medium">
                          <Link2 className="w-4 h-4" />
                          <span>–ó–∞–≤–∏—Å–∏—Ç –æ—Ç:</span>
                        </div>
                        <div className="flex flex-wrap gap-2 ml-6">
                          {stage.dependencies.map(depId => (
                            <Badge key={depId} variant="outline" className="text-xs">
                              {getStageName(depId)}
                            </Badge>
                          ))}
                        </div>
                      </div>
                    )}

                    {/* –ó–∞–≤–∏—Å–∏–º—ã–µ —ç—Ç–∞–ø—ã */}
                    {stage.dependentStages && stage.dependentStages.length > 0 && (
                      <div className="space-y-2">
                        <div className="flex items-center gap-2 text-sm font-medium">
                          <TrendingUp className="w-4 h-4" />
                          <span>–û—Ç —ç—Ç–æ–≥–æ –∑–∞–≤–∏—Å—è—Ç:</span>
                        </div>
                        <div className="flex flex-wrap gap-2 ml-6">
                          {stage.dependentStages.map(depId => (
                            <Badge key={depId} variant="outline" className="text-xs">
                              {getStageName(depId)}
                            </Badge>
                          ))}
                        </div>
                      </div>
                    )}
                  </CardContent>
                </Card>
              );
            })
          )}
        </div>
      </div>
    </div>
  );
}
